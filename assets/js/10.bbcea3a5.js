(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{214:function(a,e,s){"use strict";s.r(e);var t=s(28),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"margins-paddings-spacer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#margins-paddings-spacer"}},[a._v("#")]),a._v(" Margins, Paddings & Spacer")]),a._v(" "),s("p",[a._v("In most of the projects I'm working on there is a consistent design system, meaning that margins and paddings are always following a ruleset.\nYour margins are either 15px or 30px or 45px. Your paddings are 5px or 10px or 15px and so on.\nThats where the margin and padding mixins are used.")]),a._v(" "),s("p",[a._v('They are designed to work with a system where you have spacings that are always a multitude of a given value.\nTherefore you can simply configure the global, default margin and then tell the mixin: "hey give me 2 times the default value".')]),a._v(" "),s("h2",{attrs:{id:"values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#values"}},[a._v("#")]),a._v(" Values")]),a._v(" "),s("p",[a._v("As stated above you can pass any numeric value to the following mixins.\nIf the value "),s("strong",[a._v("has a unit")]),a._v(" (like px or %) it will simply be passed to the matching property.\nif the value "),s("strong",[a._v("does not have a unit")]),a._v(" it will be used as a multiplier for the default $margin value.\nIf you don't pass any value into the mixin we assume you just want to put the default value there")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),s("p",[a._v("Both "),s("code",[a._v("$sassyMargin")]),a._v(" and "),s("code",[a._v("$sassyMargin")]),a._v(' can be overwritten by the "horizontal" and "vertical" options if you want\nanother margin horizontally than you want vertically.')])]),a._v(" "),s("h2",{attrs:{id:"margins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#margins"}},[a._v("#")]),a._v(" Margins")]),a._v(" "),s("p",[a._v("You can use the margin mixins in the same logic you would use in your default css.\nAll those mixins depend on the configured "),s("code",[a._v("$sassyMargin")]),a._v(" value. By default the "),s("code",[a._v("$sassyMargin")]),a._v(" is set to 15px")]),a._v(" "),s("div",{staticClass:"language-sass extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sass"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[a._v(".element")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("m() // Set the margin on all sides")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("mt() // Margin top")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("mr() // Margin right")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("mb() // Margin bottom")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("ml() // Margin left")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("mh() // Horizontal Margin (left and right)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("mv() // Vertical Margin (top and bottom)")]),a._v("\n")])])]),s("h2",{attrs:{id:"paddings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#paddings"}},[a._v("#")]),a._v(" Paddings")]),a._v(" "),s("p",[a._v("Paddings work similar to margins but have "),s("strong",[a._v("one major difference")]),a._v(": By default all paddings depend\non the configured "),s("code",[a._v("$sassyPadding")]),a._v(" option. This option is by default a thrid of the "),s("code",[a._v("$sassyMargin")]),a._v(" value.\nSo with the default "),s("code",[a._v("$sassyMargin")]),a._v(" of 15 px the "),s("code",[a._v("$sassyPadding")]),a._v(" will be set to 5px.")]),a._v(" "),s("div",{staticClass:"language-sass extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sass"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[a._v(".element")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("p() // Set the padding on all sides")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("pt() // Padding top")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("pr() // Padding right")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("pb() // Padding bottom")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("pl() // Padding left")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("ph() // Horizontal Padding (left and right)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("pv() // Vertical Padding (top and bottom)")]),a._v("\n")])])]),s("h2",{attrs:{id:"spacers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spacers"}},[a._v("#")]),a._v(" Spacers")]),a._v(" "),s("p",[a._v("Spacers or space between elements are a recurring theme in most designs.\nSassy's spacers are designed to keep spacer elements based on your design system.\nFor that you have a "),s("code",[a._v("$sassySpacerBase")]),a._v(" base value (set to "),s("code",[a._v("$sassyMargin")]),a._v(" by default) that\nwill be multiplied by a given multiplier.")]),a._v(" "),s("p",[a._v("To keep all spacers equal sassy works with a list of configurable multipliers ("),s("code",[a._v("$sassySpacerMultipliers")]),a._v(").\nThe default list is: 2, 4, 6 and 8. When you define a spacer you can simply pass the id of your spacer (1-4) in a mixin\nand the multiplication will automatically be applied.")]),a._v(" "),s("p",[a._v("If you pass a value that exceeds the list of predefined spacers it will be applied as multiplier instead.\n(e.g. if you pass 6 or 7 it exceeds the default list of 4 and therefore the spacer) will be $sassySpacerBase * 6 or 7.")]),a._v(" "),s("div",{staticClass:"language-sass extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sass"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[a._v(".element")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("st() // Spacer to the top")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token atrule-line"}},[a._v("    "),s("span",{pre:!0,attrs:{class:"token atrule"}},[a._v("+")]),a._v("sb() // Spacer to the bottom")]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);